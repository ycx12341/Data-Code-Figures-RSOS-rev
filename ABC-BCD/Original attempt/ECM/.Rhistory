f.im1j - 4 * f[x.coord[j], y.coord[j]] +
f.ijp1 + f.ijm1)) +
r * (1 - n[x.coord[j], y.coord[j]] - f[x.coord[j], y.coord[j]]) * dt
p1 <- (dt * dn / (h ^ 2)) - (dt * gamma / (4 * (h ^ 2)) * (f.ip1j - f.im1j))
p2 <- (dt * dn / (h ^ 2)) + (dt * gamma / (4 * (h ^ 2)) * (f.ip1j - f.im1j))
p3 <- (dt * dn / (h ^ 2)) - (dt * gamma / (4 * (h ^ 2)) * (f.ijp1 - f.ijm1))
p4 <- 0
}
# Bottom boundary
} else if (x.coord[j] == space.length.y) {
# Bottom left corner
if (y.coord[j] == 1) {
# Restricted from moving left and down
f.ip1j <- f[x.coord[j], (y.coord[j] + 1)]
f.im1j <- 0
f.ijp1 <- f[(x.coord[j] - 1), y.coord[j]]
f.ijm1 <- 0
p0 <- 1 - (4 * dt * dn / (h ^ 2)) - (dt * gamma / (h ^ 2) * (f.ip1j +
f.im1j - 4 * f[x.coord[j], y.coord[j]] +
f.ijp1 + f.ijm1)) +
r * (1 - n[x.coord[j], y.coord[j]] - f[x.coord[j], y.coord[j]]) * dt
p1 <- 0
p2 <- (dt * dn / (h ^ 2)) + (dt * gamma / (4 * (h ^ 2)) * (f.ip1j - f.im1j))
p3 <- 0
p4 <- (dt * dn / (h ^ 2)) + (dt * gamma / (4 * (h ^ 2)) * (f.ijp1 - f.ijm1))
# Bottom right corner
} else if (y.coord[j] == space.length.x) {
# Restricted from moving right or down
f.ip1j <- 0
f.im1j <- f[x.coord[j], (y.coord[j] - 1)]
f.ijp1 <- f[(x.coord[j] - 1), y.coord[j]]
f.ijm1 <- 0
p0 <- 1 - (4 * dt * dn / (h ^ 2)) - (dt * gamma / (h ^ 2) * (f.ip1j +
f.im1j - 4 * f[x.coord[j], y.coord[j]] +
f.ijp1 + f.ijm1)) +
r * (1 - n[x.coord[j], y.coord[j]] - f[x.coord[j],y.coord[j]]) * dt
p1 <- (dt * dn / (h ^ 2)) - (dt * gamma / (4 * (h ^ 2)) * (f.ip1j - f.im1j))
p2 <- 0
p3 <- 0
p4 <- (dt * dn / (h ^ 2)) + (dt * gamma / (4 * (h ^ 2)) * (f.ijp1 - f.ijm1))
# Other cells at the bottom boundary
} else {
# Restricted from moving down
f.ip1j <- f[x.coord[j], (y.coord[j] + 1)]
f.im1j <- f[x.coord[j], (y.coord[j] - 1)]
f.ijp1 <- f[(x.coord[j] - 1), y.coord[j]]
f.ijm1 <- 0
p0 <- 1 - (4 * dt * dn / (h ^ 2)) - (dt * gamma / (h ^ 2) * (f.ip1j +
f.im1j - 4 * f[x.coord[j], y.coord[j]] +
f.ijp1 + f.ijm1)) +
r * (1 - n[x.coord[j], y.coord[j]] - f[x.coord[j],y.coord[j]]) * dt
p1 <- (dt * dn / (h ^ 2)) - (dt * gamma / (4 * (h ^ 2)) * (f.ip1j - f.im1j))
p2 <- (dt * dn / (h ^ 2)) + (dt * gamma / (4 * (h ^ 2)) * (f.ip1j - f.im1j))
p3 <- 0
p4 <- (dt * dn / (h ^ 2)) + (dt * gamma / (4 * (h ^ 2)) * (f.ijp1 - f.ijm1))
}
# Cells not at the boundary
} else {
# These cells can move in all directions
f.ip1j <- f[x.coord[j], (y.coord[j] + 1)]
f.im1j <- f[x.coord[j], (y.coord[j] - 1)]
f.ijp1 <- f[(x.coord[j] - 1), y.coord[j]]
f.ijm1 <- f[(x.coord[j] + 1), y.coord[j]]
p0 <- 1 - (4 * dt * dn / (h ^ 2)) - (dt * gamma / (h ^ 2) * (f.ip1j +
f.im1j - 4 * f[x.coord[j], y.coord[j]] +
f.ijp1 + f.ijm1)) +
r * (1 - n[x.coord[j], y.coord[j]] - f[x.coord[j],y.coord[j]]) * dt
p1 <- (dt * dn / (h ^ 2)) - (dt * gamma / (4 * (h ^ 2)) * (f.ip1j - f.im1j))
p2 <- (dt * dn / (h ^ 2)) + (dt * gamma / (4 * (h ^ 2)) * (f.ip1j - f.im1j))
p3 <- (dt * dn / (h ^ 2)) - (dt * gamma / (4 * (h ^ 2)) * (f.ijp1 - f.ijm1))
p4 <- (dt * dn / (h ^ 2)) + (dt * gamma / (4 * (h ^ 2)) * (f.ijp1 - f.ijm1))
}
# Roll the dice based on the calculated probabilities, see which direction the
# cell will choose to move to.
p <- c(p0, p1, p2, p3, p4)
for (v in 1:5) {
if (p[v] < 0) {
p[v] <- 0
} else if (p[v] > 1) {
p[v] <- 1
}
}
mvment <- sample(c(0, 1, 2, 3, 4), 1, prob = p)
# If the designated position is not occupied, the cell will move to that location.
if (mvment == 0) {
x.coord[j] <- x.coord[j]
y.coord[j] <- y.coord[j]
} else if (mvment == 1) {
if (ind.position[x.coord[j], (y.coord[j] - 1)] == 0) {
x.coord[j] <- x.coord[j]
y.coord[j] <- y.coord[j] - 1
} else {
x.coord[j] <- x.coord[j]
y.coord[j] <- y.coord[j]
}
} else if (mvment == 2) {
if (ind.position[x.coord[j], (y.coord[j] + 1)] == 0) {
x.coord[j] <- x.coord[j]
y.coord[j] <- y.coord[j] + 1
} else {
x.coord[j] <- x.coord[j]
y.coord[j] <- y.coord[j]
}
} else if (mvment == 3) {
if (ind.position[(x.coord[j] + 1), y.coord[j]] == 0) {
x.coord[j] <- x.coord[j] + 1
y.coord[j] <- y.coord[j]
} else {
x.coord[j] <- x.coord[j]
y.coord[j] <- y.coord[j]
}
} else if (mvment == 4) {
if (ind.position[(x.coord[j] - 1), y.coord[j]] == 0) {
x.coord[j] <- x.coord[j] - 1
y.coord[j] <- y.coord[j]
} else {
x.coord[j] <- x.coord[j]
y.coord[j] <- y.coord[j]
}
}
}
# Update the coordinates
ind.position <- matrix(0, nrow = space.length.y, ncol = space.length.x)
for (z in 1:length(x.coord)) {
ind.position[x.coord[z], y.coord[z]] <- 1
}
# Plots
if (i %% (int.timesteps * 0.864) == 0) {
plot(x[y.coord[1]],y[space.length.y + 1 - x.coord[1]],
xlim = c(x[1], x[length(x)]), ylim = c(y[1], y[length(y)]),
pch = 21, bg = "blue", cex = 2, xlab = "x",
ylab = "y", main = paste("Invasion pattern after ",
i/(int.timesteps * 0.864), " day reduced dn gamma", sep = ""))
for (k in 2:length(x.coord)) {
points(x[y.coord[k]], y[space.length.y + 1 - x.coord[k]],
pch = 21, cex = 2, bg = "blue")
}
}
# Optional, can be used to track the progress of the simulation
print(i)
}
citation()
rm(list = ls())
library(profvis)
profvis({
data(diamonds, package = "ggplot2")
plot(price ~ carat, data = diamonds)
m <- lm(price ~ carat, data = diamonds)
abline(m, col = "red")
})
library(profvis)
profvis({
data(diamonds, package = "ggplot2")
plot(price ~ carat, data = diamonds)
m <- lm(price ~ carat, data = diamonds)
abline(m, col = "red")
})
rm(list = ls())
library(profvis)
profvis({
data(diamonds, package = "ggplot2")
plot(price ~ carat, data = diamonds)
m <- lm(price ~ carat, data = diamonds)
abline(m, col = "red")
})
library(profvis)
profvis({
data(diamonds, package = "ggplot2")
plot(price ~ carat, data = diamonds)
m <- lm(price ~ carat, data = diamonds)
abline(m, col = "red")
})
install.packages("profvis")
install.packages("profvis")
pkgbuild::find_rtools()
pkgbuild::rtools_path()
times <- 4e5
cols <- 150
data <-
as.data.frame(x = matrix(rnorm(times * cols, mean = 5),
ncol = cols))
data <- cbind(id = paste0("g", seq_len(times)), data)
profvis({
# Store in another variable for this run
data1 <- data
# Get column means
means <- apply(data1[, names(data1) != "id"], 2, mean)
# Subtract mean from each column
for (i in seq_along(means)) {
data1[, names(data1) != "id"][, i] <-
data1[, names(data1) != "id"][, i] - means[i]
}
})
library(profvis)
times <- 4e5
cols <- 150
data <-
as.data.frame(x = matrix(rnorm(times * cols, mean = 5),
ncol = cols))
data <- cbind(id = paste0("g", seq_len(times)), data)
profvis({
# Store in another variable for this run
data1 <- data
# Get column means
means <- apply(data1[, names(data1) != "id"], 2, mean)
# Subtract mean from each column
for (i in seq_along(means)) {
data1[, names(data1) != "id"][, i] <-
data1[, names(data1) != "id"][, i] - means[i]
}
})
profvis({
res <- rep(0, 100)
for (i in 1:100) {
res[i] <- i + 3
}
})
profvis({
res <- rep(0, 100000)
for (i in 1:100000) {
res[i] <- i + 3
}
})
profvis({
res <- rep(0, 100000)
for (i in 1:100000) {
res[i] <- i + 3
}
})
profvis({
res <- rep(0, 100000)
for (i in 1:100000) {
res[i] <- i + 3
}
sum(res)
})
profvis({
res <- rep(0, 100000)
for (i in 1:100000) {
res[i] <- i + 3
}
print(sum(res))
})
prac.1 <- function(num) {
res <- rep(0, num)
for (i in 1:num) {
res[i] <- i + 3
}
}
prac.1 <- function(num) {
res <- rep(0, num)
res.2 <- rep(0, num)
for (i in 1:num) {
res[i] <- i + 3
}
for (j in 1:num) {
res.2[i] <- i * 2
}
}
profvis(prac.1(num = 100000))
profvis({prac.1(num = 100000)})
prac.1 <- function(num) {
res <- rep(0, num)
res.2 <- rep(0, num)
for (i in 1:num) {
res[i] <- i + 3
}
for (j in 1:num) {
res.2[i] <- i * 2
}
sum.1 <- sum(res)
sum.2 <- sum(res.2)
}
profvis({prac.1(num = 100000)})
profvis({prac.1(num = 100000)})
profvis({
prac.1(num = 100000)
print(sum.1)
print(sum.2)
})
prac.1 <- function(num) {
res <- rep(0, num)
res.2 <- rep(0, num)
for (i in 1:num) {
res[i] <- i + 3
}
for (j in 1:num) {
res.2[i] <- i * 2
}
sum.1 <- sum(res)
sum.2 <- sum(res.2)
print(sum.1)
}
profvis({
prac.1(num = 100000)
})
profvis({
res <- rep(0, 100)
res.2 <- rep(0, 100)
for (i in 1:100) {
res[i] <- i + 3
}
for (j in 1:100) {
res.2[i] <- i * 2
}
sum.1 <- sum(res)
sum.2 <- sum(res.2)
print(sum.1)
})
profvis({
res <- rep(0, 1000000)
res.2 <- rep(0, 1000000)
for (i in 1:1000000) {
res[i] <- i + 3
}
for (j in 1:1000000) {
res.2[i] <- i * 2
}
sum.1 <- sum(res)
sum.2 <- sum(res.2)
print(sum.1)
})
tic()
profvis({
res <- rep(0, 1000000)
res.2 <- rep(0, 1000000)
for (i in 1:1000000) {
res[i] <- i + 3
}
for (j in 1:1000000) {
res.2[i] <- i * 2
}
sum.1 <- sum(res)
sum.2 <- sum(res.2)
print(sum.1)
})
toc()
library(tictoc)
tic()
profvis({
res <- rep(0, 1000000)
res.2 <- rep(0, 1000000)
for (i in 1:1000000) {
res[i] <- i + 3
}
for (j in 1:1000000) {
res.2[i] <- i * 2
}
sum.1 <- sum(res)
sum.2 <- sum(res.2)
print(sum.1)
})
toc()
library(profvis)
profvis({
res <- rep(0, 1000000)
res.2 <- rep(0, 1000000)
for (i in 1:1000000) {
res[i] <- i + 3
}
for (j in 1:1000000) {
res.2[i] <- i * 2
}
sum.1 <- sum(res)
sum.2 <- sum(res.2)
print(sum.1)
})
profvis({
data(diamonds, package = "ggplot2")
plot(price ~ carat, data = diamonds)
m <- lm(price ~ carat, data = diamonds)
abline(m, col = "red")
})
rm(list = ls())
library(profvis)
profvis({
data(diamonds, package = "ggplot2")
plot(price ~ carat, data = diamonds)
m <- lm(price ~ carat, data = diamonds)
abline(m, col = "red")
})
profvis({
data(diamonds, package = "ggplot2")
plot(price ~ carat, data = diamonds)
m <- lm(price ~ carat, data = diamonds)
abline(m, col = "red")
})
library(profvis)
profvis({
data(diamonds, package = "ggplot2")
plot(price ~ carat, data = diamonds)
m <- lm(price ~ carat, data = diamonds)
abline(m, col = "red")
})
options(keep.source = TRUE)
profvis({
data(diamonds, package = "ggplot2")
plot(price ~ carat, data = diamonds)
m <- lm(price ~ carat, data = diamonds)
abline(m, col = "red")
})
options(keep.source=TRUE); p <- profvis::profvis({ profvis::pause(0.2) }); htmlwidgets::saveWidget(p, 'test.html')
View(p)
profvis({
res <- rep(0, 1000000)
res.2 <- rep(0, 1000000)
for (i in 1:1000000) {
res[i] <- i + 3
}
for (j in 1:1000000) {
res.2[i] <- i * 2
}
sum.1 <- sum(res)
sum.2 <- sum(res.2)
print(sum.1)
})
profvis({
data(diamonds, package = "ggplot2")
plot(price ~ carat, data = diamonds)
m <- lm(price ~ carat, data = diamonds)
abline(m, col = "red")
})
times <- 4e5
cols <- 150
data <-
as.data.frame(x = matrix(rnorm(times * cols, mean = 5),
ncol = cols))
data <- cbind(id = paste0("g", seq_len(times)), data)
profvis({
# Store in another variable for this run
data1 <- data
# Get column means
means <- apply(data1[, names(data1) != "id"], 2, mean)
# Subtract mean from each column
for (i in seq_along(means)) {
data1[, names(data1) != "id"][, i] <-
data1[, names(data1) != "id"][, i] - means[i]
}
})
rm(list = ls())
mod1 <- lm(y ~ x)
# Response variable (Data)
y <- c(20, 58, 76, 97, 134)
# Explanatory variable
x <- c(5, 10, 15, 20, 25)
mod1 <- lm(y ~ x)
summary(mod1)
plot(mod1)
par(mfrow = c(2,2))
plot(mod1)
summary(mod1)
plot(x)
par(mfrow = c(1,1))
plot(x)
plot(y,x)
plot(x,y)
lines(mod1)
mod1$coefficients
mod1$coefficients[1]
lines(mod1$fitted.values)
3.87^(-0.5)
3.87^(-0.5*0.9)
3.87^(-1)
3.87^(-1/(2*1))
3.87^(-1/(2*0.9))
3.87^(-1/(2*0.8))
3.87^(-1/(2*0.7))
3.87^(-1/(2*0.6))
3.87^(-1/(2*0.5))
3.87^(-1/(2*0.4))
3.87^(-1/(2*0.3))
3.87^(-0.5)
0.001^(-0.5)
0.001^(-0.45)
0.001^(-0.4)
3.87^(-0.5)
3.87^(-0.45)
3.87^(-0.4)
0.01^(-0.4)
0.01^(-0.5)
0.01^(-0.45)
0.01^(-0.4)
0.01^(-0.5)
0.01^(-1)
0.01^(-2)
3.87^(-0.5)
3.87^(-1)
3.87^(-2)
3.87^(-0.5)
3.87^(-0.5*1.1)
3.87^(-0.5*1.2)
0.01^(-0.5)
0.01^(-0.*1.15)
0.01^(-0.1*1.1)
0.01^(-0.5*1.1)
0.01^(-0.5*1.2)
0.01^(-0.5*1.3)
0.01^(-0.5*1.4)
1.24^(-0.5)
1.24^(-0.5*1.1)
1.24^(-0.5*1.2)
1.24^(-0.5*1.3)
1.24^(-0.5*1.4)
8.24^(-0.5)
8.24^(-0.5*1.1)
8.24^(-0.5*1.2)
8.24^(-0.5*1.3)
8.24^(-0.5*1.4)
setwd("D:/Academia/Data-code-figures-ver-4/Data-Code-Figures-ver-4/ABC-BCD/Original attempt/ECM")
setwd("D:/Academia/Data-code-figures-ver-4/Data-Code-Figures-ver-4/ABC-BCD/Original attempt/ECM")
kkk <- read.table("Round 3 parameters 10000 ecm.txt", sep = "", header = TRUE)
apply(kkk, 2, mean)
