rm(list = ls()) # Don't execute this command if your workspace is full of data!
powmatrix <- matrix(0, nrow = 4001, ncol = 3) # Power matrix
powmatrix[,1] <- c(100:4100) # Sample sizes
lower <- qbinom(0.025, powmatrix[,1], 0.95) # Lower quantiles of the sample sizes
upper <- qbinom(0.975, powmatrix[,1], 0.95) # Upper quantiles of the sample sizes
qbinom(0.975, 3000, 0.95)
pbinom(2873, 3000, 0.95)
pbinom(2874, 3000, 0.95)
pbinom(2872, 3000, 0.95)
View(powmatrix)
powmatrix[,2] <- pbinom(lower - 1, powmatrix[,1], 0.85) +
(1 - pbinom(upper, powmatrix[,1], 0.85)) # Power at p = 0.85
powmatrix[,3] <- pbinom(lower - 1, powmatrix[,1], 0.95) + # Power at p = 0.95
(1 - pbinom(upper, powmatrix[,1], 0.95))
min(which(powmatrix[,2] > 0.70)) + 99 # Minumum sample size.
View(powmatrix)
rm(list = ls()) # Don't execute this command if your workspace is full of data!
powmatrix <- matrix(0, nrow = 4001, ncol = 3) # Power matrix
powmatrix[,1] <- c(100:4100) # Sample sizes
lower <- qbinom(0.025, powmatrix[,1], 0.90) # Lower quantiles of the sample sizes
upper <- qbinom(0.975, powmatrix[,1], 0.90) # Upper quantiles of the sample sizes
powmatrix[,2] <- pbinom(lower - 1, powmatrix[,1], 0.85) +
(1 - pbinom(upper, powmatrix[,1], 0.85)) # Power at p = 0.85
powmatrix[,3] <- pbinom(lower - 1, powmatrix[,1], 0.95) + # Power at p = 0.95
(1 - pbinom(upper, powmatrix[,1], 0.95))
min(which(powmatrix[,2] > 0.70)) + 99 # Minumum sample size.
qbinom(0.975, 30, 0.8)
1 - pbinom(28, 30, 0.8)
1 - pbinom(27, 30, 0.8)
qbinom(0.025, 30, 0.8)
pbinom(19, 30, 0.8)
pbinom(18, 30, 0.8)
pbinom(18, 30, 0.8) + (1 - pbinom(28, 30, 0.8))
pbinom(19, 30, 0.8) + (1 - pbinom(27, 30, 0.8))
pow.function <- function(diff) {
d <- diff
pmatrix <- matrix(0, nrow = 9900, ncol = 3)
pmatrix[,1] <- c(101:10000)
l <- qbinom(0.025, pmatrix[,1], 0.9) - 1
u <- qbinom(0.975, pmatrix[,3], 0.9)
pmatrix[,2] <- pbinom(l-1, pmatrix[,1], 0.9 - d) + (1 - pbinom(u, pmatrix[,1], 0.9 - d))
pmatrix[,3] <- pbinom(l-1, pmatrix[,1], 0.9 + d) + (1 - pbinom(u, pmatrix[,1], 0.9 + d))
output <- min(which(pmatrix[,2])>0.7) + 99
return(output)
}
pow.function(0.05)
pow.function <- function(diff) {
d <- diff
pmatrix <- matrix(0, nrow = 9900, ncol = 3)
pmatrix[,1] <- c(101:10000)
l <- qbinom(0.025, pmatrix[,1], 0.9) - 1
u <- qbinom(0.975, pmatrix[,3], 0.9)
pmatrix[,2] <- pbinom(l-1, pmatrix[,1], 0.9 - d) + (1 - pbinom(u, pmatrix[,1], 0.9 - d))
pmatrix[,3] <- pbinom(l-1, pmatrix[,1], 0.9 + d) + (1 - pbinom(u, pmatrix[,1], 0.9 + d))
output <- min(which(pmatrix[,2] > 0.7)) + 99
return(output)
}
pow.function(0.05)
pow.function <- function(diff) {
d <- diff
pmatrix <- matrix(0, nrow = 9900, ncol = 3)
pmatrix[,1] <- c(101:10000)
l <- qbinom(0.025, pmatrix[,1], 0.9) - 1
u <- qbinom(0.975, pmatrix[,3], 0.9)
pmatrix[,2] <- pbinom(l-1, pmatrix[,1], 0.9 - d) + (1 - pbinom(u, pmatrix[,1], 0.9 - d))
pmatrix[,3] <- pbinom(l-1, pmatrix[,1], 0.9 + d) + (1 - pbinom(u, pmatrix[,1], 0.9 + d))
output <- min(which(pmatrix[,2] > 0.70)) + 99
return(output)
}
pow.function(0.05)
rm(list = ls()) # Don't execute this command if your workspace is full of data!
powmatrix <- matrix(0, nrow = 4001, ncol = 3) # Power matrix
powmatrix[,1] <- c(100:4100) # Sample sizes
lower <- qbinom(0.025, powmatrix[,1], 0.90) # Lower quantiles of the sample sizes
upper <- qbinom(0.975, powmatrix[,1], 0.90) # Upper quantiles of the sample sizes
powmatrix[,2] <- pbinom(lower - 1, powmatrix[,1], 0.85) +
(1 - pbinom(upper, powmatrix[,1], 0.85)) # Power at p = 0.85
powmatrix[,3] <- pbinom(lower - 1, powmatrix[,1], 0.95) + # Power at p = 0.95
(1 - pbinom(upper, powmatrix[,1], 0.95))
min(which(powmatrix[,2] > 0.70)) + 99 # Minumum sample size.
pow.function <- function(diff) {
d <- diff
pmatrix <- matrix(0, nrow = 9900, ncol = 3)
pmatrix[,1] <- c(101:10000)
l <- qbinom(0.025, pmatrix[,1], 0.9) - 1
u <- qbinom(0.975, pmatrix[,3], 0.9)
pmatrix[,2] <- pbinom(l-1, pmatrix[,1], 0.9 - d) + (1 - pbinom(u, pmatrix[,1], 0.9 - d))
pmatrix[,3] <- pbinom(l-1, pmatrix[,1], 0.9 + d) + (1 - pbinom(u, pmatrix[,1], 0.9 + d))
output <- min(which(pmatrix[,2] > 0.70)) + 99
return(output)
}
pow.function(0.05)
pow.function <- function(diff) {
d <- diff
pmatrix <- matrix(0, nrow = 9900, ncol = 3)
pmatrix[,1] <- c(101:10000)
l <- qbinom(0.025, pmatrix[,1], 0.9) - 1
u <- qbinom(0.975, pmatrix[,3], 0.9)
pmatrix[,2] <- pbinom(l, pmatrix[,1], 0.9 - d) + (1 - pbinom(u, pmatrix[,1], 0.9 - d))
pmatrix[,3] <- pbinom(l, pmatrix[,1], 0.9 + d) + (1 - pbinom(u, pmatrix[,1], 0.9 + d))
output <- min(which(pmatrix[,2] > 0.70)) + 99
return(output)
}
pow.function(0.05)
pow.function <- function(diff) {
d <- diff
pmatrix <- matrix(0, nrow = 9900, ncol = 3)
pmatrix[,1] <- c(101:10000)
l <- qbinom(0.025, pmatrix[,1], 0.9) - 1
u <- qbinom(0.975, pmatrix[,3], 0.9)
pmatrix[,2] <- pbinom(l, pmatrix[,1], 0.9 - d) + (1 - pbinom(u, pmatrix[,1], 0.9 - d))
pmatrix[,3] <- pbinom(l, pmatrix[,1], 0.9 + d) + (1 - pbinom(u, pmatrix[,1], 0.9 + d))
output <- min(which(pmatrix[,2] > 0.70)) + 99
return(output)
}
pow.function(0.05)
#pow.function <- function(diff) {
d <- 0.05
pmatrix <- matrix(0, nrow = 9900, ncol = 3)
pmatrix[,1] <- c(101:10000)
l <- qbinom(0.025, pmatrix[,1], 0.9) - 1
u <- qbinom(0.975, pmatrix[,3], 0.9)
u <- qbinom(0.975, pmatrix[,1], 0.9)
pmatrix[,2] <- pbinom(l, pmatrix[,1], 0.9 - d) + (1 - pbinom(u, pmatrix[,1], 0.9 - d))
pmatrix[,3] <- pbinom(l, pmatrix[,1], 0.9 + d) + (1 - pbinom(u, pmatrix[,1], 0.9 + d))
output <- min(which(pmatrix[,2] > 0.70)) + 100
pow.function <- function(diff) {
d <- 0.05
pmatrix <- matrix(0, nrow = 9900, ncol = 3)
pmatrix[,1] <- c(101:10000)
l <- qbinom(0.025, pmatrix[,1], 0.9) - 1
u <- qbinom(0.975, pmatrix[,1], 0.9)
pmatrix[,2] <- pbinom(l, pmatrix[,1], 0.9 - d) + (1 - pbinom(u, pmatrix[,1], 0.9 - d))
pmatrix[,3] <- pbinom(l, pmatrix[,1], 0.9 + d) + (1 - pbinom(u, pmatrix[,1], 0.9 + d))
output <- min(which(pmatrix[,2] > 0.70)) + 100
return(output)
}
pow.function(0.05)
#pow.function <- function(diff) {
d <- 0.05
pmatrix <- matrix(0, nrow = 9900, ncol = 3)
pmatrix[,1] <- c(101:10000)
l <- qbinom(0.025, pmatrix[,1], 0.9) - 1
u <- qbinom(0.975, pmatrix[,1], 0.9)
pmatrix[,2] <- pbinom(l, pmatrix[,1], 0.9 - d) + (1 - pbinom(u, pmatrix[,1], 0.9 - d))
pmatrix[,3] <- pbinom(l, pmatrix[,1], 0.9 + d) + (1 - pbinom(u, pmatrix[,1], 0.9 + d))
output.1 <- min(which(pmatrix[,2] > 0.70)) + 100
output.2 <- min(which(pmatrix[,3] > 0.70)) + 100
View(pmatrix)
pow.function <- function(diff) {
d <- diff
pmatrix <- matrix(0, nrow = 9900, ncol = 3)
pmatrix[,1] <- c(101:10000)
l <- qbinom(0.025, pmatrix[,1], 0.9) - 1
u <- qbinom(0.975, pmatrix[,1], 0.9)
pmatrix[,2] <- pbinom(l, pmatrix[,1], 0.9 - d) + (1 - pbinom(u, pmatrix[,1], 0.9 - d))
pmatrix[,3] <- pbinom(l, pmatrix[,1], 0.9 + d) + (1 - pbinom(u, pmatrix[,1], 0.9 + d))
output.1 <- min(which(pmatrix[,2] > 0.70)) + 100
output.2 <- min(which(pmatrix[,3] > 0.70)) + 100
return(max(output.1, output.2))
}
pow.function <- function(diff) {
d <- diff
pmatrix <- matrix(0, nrow = 9900, ncol = 3)
pmatrix[,1] <- c(101:10000)
l <- qbinom(0.025, pmatrix[,1], 0.9) - 1
u <- qbinom(0.975, pmatrix[,1], 0.9)
pmatrix[,2] <- pbinom(l, pmatrix[,1], 0.9 - d) + (1 - pbinom(u, pmatrix[,1], 0.9 - d))
pmatrix[,3] <- pbinom(l, pmatrix[,1], 0.9 + d) + (1 - pbinom(u, pmatrix[,1], 0.9 + d))
output.1 <- min(which(pmatrix[,2] > 0.70)) + 100
output.2 <- min(which(pmatrix[,3] > 0.70)) + 100
return(max(output.1, output.2))
}
pow.function(0.05)
setwd("D:/Academia/Revised RSOS/ABC 150 bandwidth no density/Original attempt/ECM")
setwd("D:/Academia/Revised RSOS/ABC 150 bandwidth no density/Original attempt/ECM")
3.408093*0.25
setwd("D:/Academia/Revised RSOS/ABC 150 bandwidth no density/Original attempt/ECM MDE")
setwd("D:/Academia/Revised RSOS/ABC 150 bandwidth no density/Original attempt/ECM MDE")
70.92385*0.01
setwd("D:/Academia/Revised RSOS/ABC 150 bandwidth no density/Original attempt/TC ECM MDE")
setwd("D:/Academia/Revised RSOS/ABC 150 bandwidth no density/Original attempt/TC ECM MDE")
setwd("D:/Academia/Revised RSOS/ABC 150 bandwidth no density/Original attempt/TC ECM MDE")
setwd("D:/Academia/Revised RSOS/ABC 150 bandwidth no density/Original attempt/ECM")
setwd("D:/Academia/Revised RSOS/ABC 150 bandwidth no density/Original attempt/ECM")
Round_3_paras1_res <- readRDS("D:/Academia/Revised RSOS/ABC 150 bandwidth no density/Original attempt/ECM/BCD_results_ecm_r3/Round_3_paras1_res.rds")
# Set the directory to store the simulation results.
save.sims.dir <- "BCD_results_ecm_r3"
# Calculate and record the average summary statistics of the parameters being
# investigated in the current round, the stopping criterion (75% reduction in
# the mean summary statistics of the initial parameters) has not been met
# yet!
bcd.ecm.r3 <- vector()
for (i in 1:10000) {
res.temp <- read_rds(paste0("./", save.sims.dir, "/Round_3_paras",i,"_res.rds"))
bcd.ecm.r3 <- rbind(c(i, res.temp))
}
library(readr)
for (i in 1:10000) {
res.temp <- read_rds(paste0("./", save.sims.dir, "/Round_3_paras",i,"_res.rds"))
bcd.ecm.r3 <- rbind(c(i, res.temp))
}
# Calculate and record the average summary statistics of the parameters being
# investigated in the current round, the stopping criterion (75% reduction in
# the mean summary statistics of the initial parameters) has not been met
# yet!
bcd.ecm.r3 <- vector()
for (i in 1:10000) {
res.temp <- read_rds(paste0("./", save.sims.dir, "/Round_3_paras",i,"_res.rds"))
bcd.ecm.r3 <- rbind(bcd.ecm.r3, c(i, res.temp))
}
View(bcd.ecm.r3)
write.table(bcd.ecm.r3, "bcd_ecm_r3.txt")
rm(list = ls())
