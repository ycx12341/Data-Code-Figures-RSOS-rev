if (call.page == "previous") {
counter <- counter - 10
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
} else if (call.page == "next") {
counter <- counter + 10
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
}
}
}
if (current.page == 18) {
counter <- 172
if (call.page == "previous") {
counter <- counter - 2
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
} else if (call.page == "next") {
return(paste0("You have reached the last page!"))
}
}
}
page.selection <- function(current.page, call.page) {
if (1 <= current.page && current.page <= 17) {
counter <- counter * 10
if (current.page == 1) {
if (call.page == "previous") {
return("You have already reached page 1!")
} else if (call.page == "next") {
counter <- counter + 10
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
}
} else if (current.page == 17) {
if (call.page == "previous") {
counter <- counter - 10
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
} else if (call.page == "next") {
counter <- counter + 2
current.page <- 18
return(paste0("You are at page ", current.page, " now!"))
}
} else {
if (call.page == "previous") {
counter <- counter - 10
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
} else if (call.page == "next") {
counter <- counter + 10
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
}
}
}
if (current.page == 18) {
counter <- 172
if (call.page == "previous") {
counter <- counter - 2
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
} else if (call.page == "next") {
return(paste0("You have reached the last page!"))
}
}
}
page.selection(current.page = 1, call.page = "next")
page.selection <- function(current.page, call.page) {
if (1 <= current.page && current.page <= 17) {
counter <- current.page * 10
if (current.page == 1) {
if (call.page == "previous") {
return("You have already reached page 1!")
} else if (call.page == "next") {
counter <- counter + 10
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
}
} else if (current.page == 17) {
if (call.page == "previous") {
counter <- counter - 10
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
} else if (call.page == "next") {
counter <- counter + 2
current.page <- 18
return(paste0("You are at page ", current.page, " now!"))
}
} else {
if (call.page == "previous") {
counter <- counter - 10
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
} else if (call.page == "next") {
counter <- counter + 10
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
}
}
}
if (current.page == 18) {
counter <- 172
if (call.page == "previous") {
counter <- counter - 2
current.page <- counter/10
return(paste0("You are at page ", current.page, " now!"))
} else if (call.page == "next") {
return(paste0("You have reached the last page!"))
}
}
}
page.selection(current.page = 1, call.page = "next")
page.selection(current.page = 1, call.page = "previous")
page.selection(current.page = 2, call.page = "previous")
page.selection(current.page = 2, call.page = "next")
page.selection(current.page = 18, call.page = "previous")
page.selection(current.page = 18, call.page = "next")
page.selection(current.page = 15, call.page = "next")
page.selection(current.page = 14, call.page = "next")
page.selection(current.page = 14, call.page = "previous")
pnorm(10400, 10250, sqrt(11250))
pnorm(10400/50, 10250/50, sqrt(11250)/50)
sqrt(11250)/50
10400/50
10250/50
pnorm(10400/50, 10250/50, sqrt(11250)/sqrt(50))
sqrt(11250)
pnorm(10400, 10250, 11250)
pnorm(80.8, 80, 12)
pnorm(50500, 50000, 90000)
pnorm(50500, 50000, sqrt(90000))
rm(list = ls())
n.sims <- 10000
set.seed(874513)
dn <- runif(n.sims, 0.000069, 0.02)
gamma <- runif(n.sims, 0.005, 0.26)
rn <- runif(n.sims,3.5,9)
eta <- runif(n.sims, 7,18)
dm <- runif(n.sims,0.0001,0.033)
alpha <- runif(n.sims,0.07,0.18)
init.cells.cols <- sample(c(1,2,3,4,5), n.sims, replace = TRUE)
prob.death <- runif(n.sims, 0.01, 0.1)
prob.prof <- runif(n.sims, 0.2, 1)
paras.table <- cbind(dn, gamma, rn, eta, dm, alpha, init.cells.cols,
prob.death, prob.prof)
((7 * 20.276) + (9 * 14.812))/16
(19.11 - 13.61) / (sqrt(17.2025) * sqrt(0.125 + 0.1))
pt(2.796, 16)
2*(1 - pt(2.796, 16))
qf(0.025, 7, 9)
qf(0.975, 7, 9)
14.812/20.276
qf(0.025, 9, 7)
qf(0.975, 9, 7)
((8 * (420^2)) + (15 * (390^2)))/23
(1309 - 1205) / (sqrt(160552.2) * sqrt((1/9) + (1/16)))
(420/390)^2
9 + 25 + 1 + 16 + 9 + 49 + 1
16 * 16 /8
-2 / sqrt(78/7/8)
((4 * 0.96^2) + (4 * 1.08^2))/8
(45.2 - 43.9)/sqrt(1.044 * (2/5))
2*(1-pt(2.012,8))
sl <- c(48.3, 47.6, 49.2, 50.3, 48.8, 51.1, 49.0, 48.1)
ha <- c(50.4, 47.3, 50.8, 52.3, 47.7, 54.5, 48.9, 49.9)
mean(sl-ha)
diff <- sl - ha
sum(diff ^ 2)
1/7 * (sum(diff^2) - 8 * (mean(diff) ^ 2))
8 * (mean(diff) ^ 2)
-1.175/sqrt(2.291/8)
mean(c(25, 33, 43, 45))
mean(c(15, 16, 16, 17, 20, 23, 28, 28, 35, 35))
32/1001
mean(c(13, 14, 10, 13))
mean(c(19, 17, 18, 13, 20, 15))
factorial(10)/(factorial(4) * factorial(6))
setwd("F:/学术/Revised RSOS material/ABC 150 bandwidth no density/Extra attempt 2/ECM MDE")
setwd("F:/学术/Revised RSOS material/ABC 150 bandwidth no density/Extra attempt 2/ECM MDE")
rm(list = ls())
library(doParallel)
library(doRNG)
library(tictoc)
library(readr)
source("Automatic.R")
save.sims.dir <- "BCD_results_ecm_mde_r2"
save.sims <- TRUE
if(save.sims) {
if(!dir.exists(save.sims.dir)) dir.create(save.sims.dir)
}
paras.ecm.mde.r2 <- as.matrix(read.table("Round 2 parameters 10000 ecm_mde.txt",
sep = "", header = TRUE))
n.thread <- detectCores() - 1
n.sims <- 10000
cl <- makeCluster(n.thread)
registerDoParallel(cl)
tic()
ests <- foreach (i = 1:n.sims, .combine = rbind) %dopar% {
bcd.temp <- bcd(paras = paras.ecm.mde.r2[i,], paras.ind = "ecm_mde")
readr::write_rds(bcd.temp,
path = paste0("./", save.sims.dir, "/Round_2_paras", i, "_res.rds"))
c(i, bcd.temp)
}
toc()
stopCluster(cl)
write.table(ests, "bcd_ecm_mde_r2.txt")
bcd.ecm.mde.r2 <- unname(ests)
ind.nan.ecm.mde.r2 <- which(is.na(bcd.ecm.mde.r2[,2]))
bcd.ecm.mde.r2.valid <- bcd.ecm.mde.r2[-ind.nan.ecm.mde.r2,]
mean(bcd.ecm.mde.r2.valid[,2]) # 5.008869
min(bcd.ecm.mde.r2.valid[,2]) # 0.02499226
paras.ecm.mde.r3 <- abc.bcd(ss.mat = bcd.ecm.mde.r2, paras = paras.ecm.mde.r2, bw = 0.75)
write.table(paras.ecm.mde.r3, "Round 3 parameters 10000 ecm_mde.txt")
rm(list = ls())
library(doParallel)
library(doRNG)
library(tictoc)
library(readr)
source("Automatic.R")
save.sims.dir <- "BCD_results_ecm_mde_r3"
save.sims <- TRUE
if(save.sims) {
if(!dir.exists(save.sims.dir)) dir.create(save.sims.dir)
}
paras.ecm.mde.r3 <- as.matrix(read.table("Round 3 parameters 10000 ecm_mde.txt",
sep = "", header = TRUE))
n.thread <- detectCores() - 1
n.sims <- 10000
cl <- makeCluster(n.thread)
registerDoParallel(cl)
tic()
ests <- foreach (i = 1:n.sims, .combine = rbind) %dopar% {
bcd.temp <- bcd(paras = paras.ecm.mde.r3[i,], paras.ind = "ecm_mde")
readr::write_rds(bcd.temp,
path = paste0("./", save.sims.dir, "/Round_3_paras", i, "_res.rds"))
c(i, bcd.temp)
}
toc()
stopCluster(cl)
write.table(ests, "bcd_ecm_mde_r3.txt")
bcd.ecm.mde.r3 <- unname(ests)
ind.nan.ecm.mde.r3 <- which(is.na(bcd.ecm.mde.r3[,2]))
bcd.ecm.mde.r3.valid <- bcd.ecm.mde.r3[-ind.nan.ecm.mde.r3,]
mean(bcd.ecm.mde.r3.valid[,2]) # 2.240583
min(bcd.ecm.mde.r3.valid[,2]) # 0.02306999
paras.ecm.mde.r4 <- abc.bcd(ss.mat = bcd.ecm.mde.r3, paras = paras.ecm.mde.r3, bw = 1.125)
write.table(paras.ecm.mde.r4, "Round 4 parameters 10000 ecm_mde.txt")
apply(paras.ecm.mde.r4,2 ,mean)
rm(list = ls())
library(doParallel)
library(doRNG)
library(tictoc)
library(readr)
source("Automatic.R")
save.sims.dir <- "BCD_results_ecm_mde_r4"
save.sims <- TRUE
if(save.sims) {
if(!dir.exists(save.sims.dir)) dir.create(save.sims.dir)
}
paras.ecm.mde.r4 <- as.matrix(read.table("Round 4 parameters 10000 ecm_mde.txt",
sep = "", header = TRUE))
n.thread <- detectCores() - 1
n.sims <- 10000
cl <- makeCluster(n.thread)
registerDoParallel(cl)
tic()
ests <- foreach (i = 1:n.sims, .combine = rbind) %dopar% {
bcd.temp <- bcd(paras = paras.ecm.mde.r4[i,], paras.ind = "ecm_mde")
readr::write_rds(bcd.temp,
path = paste0("./", save.sims.dir, "/Round_4_paras", i, "_res.rds"))
c(i, bcd.temp)
}
toc()
stopCluster(cl)
write.table(ests, "bcd_ecm_mde_r4.txt")
bcd.ecm.mde.r4 <- unname(ests)
ind.nan.ecm.mde.r4 <- which(is.na(bcd.ecm.mde.r4[,2]))
bcd.ecm.mde.r4.valid <- bcd.ecm.mde.r4[-ind.nan.ecm.mde.r4,]
mean(bcd.ecm.mde.r4.valid[,2]) # 0.2982225
min(bcd.ecm.mde.r4.valid[,2]) # 0.02306999
(7.074733 - 0.3529357)/7.074733*100
setwd("F:/学术/Revised RSOS material/ABC 150 bandwidth no density/Extra attempt 2/TC ECM MDE")
rm(list = ls())
library(doParallel)
library(doRNG)
library(tictoc)
library(readr)
source("Automatic.R")
save.sims.dir <- "BCD_results_all3_r1"
save.sims <- TRUE
if(save.sims) {
if(!dir.exists(save.sims.dir)) dir.create(save.sims.dir)
}
paras.ecm.mde.r4 <- as.matrix(read.table("Round 4 parameters 10000 ecm_mde.txt",
sep = "", header = TRUE))
set.seed(117)
dn<-runif(10000,0.000069,0.02)
gamma<-runif(10000,0.005,0.26)
eta<-paras.ecm.mde.r4[,3]
dm<-paras.ecm.mde.r4[,4]
alpha<-paras.ecm.mde.r4[,5]
rn<-runif(10000,3.5,9)
paras.all3.r1 <- cbind(dn,gamma,eta,dm,alpha,rn)
write.table(paras.all3.r1,"Round 1 parameters 10000 all 3.txt")
setwd("F:/学术/Revised RSOS material/ABC 150 bandwidth no density/Extra attempt 2/TC ECM MDE")
n.thread <- detectCores() - 1
n.sims <- 10000
cl <- makeCluster(n.thread)
registerDoParallel(cl)
paras.all3.r1 <- as.matrix(read.table("Round 1 parameters 10000 all 3.txt", sep = "",
header = TRUE))
tic()
ests <- foreach (i = 1:n.sims, .combine = rbind) %dopar% {
bcd.temp <- bcd(paras = paras.all3.r1[i,], paras.ind = "all_three")
readr::write_rds(bcd.temp,
path = paste0("./", save.sims.dir, "/Round_1_paras", i, "_res.rds"))
c(i, bcd.temp)
}
toc()
stopCluster(cl)
write.table(ests, "bcd_all3_r1.txt")
bcd.all3.r1 <- unname(ests)
ind.nan.all3.r1 <- which(is.na(bcd.all3.r1[,2]))
bcd.all3.r1.valid <- bcd.all3.r1[-ind.nan.all3.r1,]
mean(bcd.all3.r1.valid[,2]) # 3.93648
min(bcd.all3.r1.valid[,2]) # 0.02916887
apply(paras.ecm.mde.r4, 2, mean)
paras.all3.r2 <- abc.bcd(ss.mat = bcd.all3.r1, paras = paras.all3.r1, bw = 0.5)
write.table(paras.all3.r2, "Round 2 parameters 10000 all 3.txt")
rm(list = ls())
library(doParallel)
library(doRNG)
library(tictoc)
library(readr)
source("Automatic.R")
save.sims.dir <- "BCD_results_all3_r2"
save.sims <- TRUE
if(save.sims) {
if(!dir.exists(save.sims.dir)) dir.create(save.sims.dir)
}
paras.all3.r2 <- as.matrix(read.table("Round 2 parameters 10000 all 3.txt", sep = "",
header = TRUE))
n.thread <- detectCores() - 1
n.sims <- 10000
cl <- makeCluster(n.thread)
registerDoParallel(cl)
apply(paras.all3.r2, 2, mean)
tic()
ests <- foreach (i = 1:n.sims, .combine = rbind) %dopar% {
bcd.temp <- bcd(paras = paras.all3.r2[i,], paras.ind = "all_three")
readr::write_rds(bcd.temp,
path = paste0("./", save.sims.dir, "/Round_2_paras", i, "_res.rds"))
c(i, bcd.temp)
}
toc()
stopCluster(cl)
write.table(ests, "bcd_all3_r2.txt")
bcd.all3.r2 <- unname(ests)
ind.nan.all3.r2 <- which(is.na(bcd.all3.r2[,2]))
bcd.all3.r2.valid <- bcd.all3.r2[-ind.nan.all3.r2,]
mean(bcd.all3.r2.valid[,2]) # 2.184187
min(bcd.all3.r2.valid[,2]) # 0.02530491
paras.all3.r3 <- abc.bcd(ss.mat = bcd.all3.r2, paras = paras.all3.r2, bw = 0.75)
write.table(paras.all3.r3, "Round 3 parameters 10000 all 3.txt")
apply(paras.all3.r3, 2, mean)
rm(list = ls())
library(doParallel)
library(doRNG)
library(tictoc)
library(readr)
source("Automatic.R")
save.sims.dir <- "BCD_results_all3_r3"
save.sims <- TRUE
if(save.sims) {
if(!dir.exists(save.sims.dir)) dir.create(save.sims.dir)
}
paras.all3.r3 <- as.matrix(read.table("Round 3 parameters 10000 all 3.txt", sep = "",
header = TRUE))
n.thread <- detectCores() - 1
n.sims <- 10000
cl <- makeCluster(n.thread)
registerDoParallel(cl)
tic()
ests <- foreach (i = 1:n.sims, .combine = rbind) %dopar% {
bcd.temp <- bcd(paras = paras.all3.r3[i,], paras.ind = "all_three")
readr::write_rds(bcd.temp,
path = paste0("./", save.sims.dir, "/Round_3_paras", i, "_res.rds"))
c(i, bcd.temp)
}
toc()
stopCluster(cl)
write.table(ests, "bcd_all3_r3.txt")
bcd.all3.r3 <- unname(ests)
ind.nan.all3.r3 <- which(is.na(bcd.all3.r3[,2]))
bcd.all3.r3.valid <- bcd.all3.r3[-ind.nan.all3.r3,]
mean(bcd.all3.r3.valid[,2]) # 0.7146851
min(bcd.all3.r3.valid[,2]) # 0.02384367
paras.all3.r4 <- abc.bcd(ss.mat = bcd.all3.r3, paras = paras.all3.r3, bw = 1.125)
write.table(paras.all3.r4, "Round 4 parameters 10000 all 3.txt")
apply(paras.all3.r3, 2, mean)
apply(paras.all3.r4, 2, mean)
rm(list = ls())
library(doParallel)
library(doRNG)
library(tictoc)
library(readr)
source("Automatic.R")
save.sims.dir <- "BCD_results_all3_r4"
save.sims <- TRUE
if(save.sims) {
if(!dir.exists(save.sims.dir)) dir.create(save.sims.dir)
}
paras.all3.r4 <- as.matrix(read.table("Round 4 parameters 10000 all 3.txt", sep = "",
header = TRUE))
n.thread <- detectCores() - 1
n.sims <- 10000
cl <- makeCluster(n.thread)
registerDoParallel(cl)
tic()
ests <- foreach (i = 1:n.sims, .combine = rbind) %dopar% {
bcd.temp <- bcd(paras = paras.all3.r4[i,], paras.ind = "all_three")
readr::write_rds(bcd.temp,
path = paste0("./", save.sims.dir, "/Round_4_paras", i, "_res.rds"))
c(i, bcd.temp)
}
toc()
stopCluster(cl)
write.table(ests, "bcd_all3_r4.txt")
bcd.all3.r4 <- unname(ests)
ind.nan.all3.r4 <- which(is.na(bcd.all3.r4[,2]))
bcd.all3.r4.valid <- bcd.all3.r4[-ind.nan.all3.r4,]
mean(bcd.all3.r4.valid[,2]) # 0.1822057
min(bcd.all3.r4.valid[,2]) # 0.02328316
4.217856*0.02
paras.all3.r5 <- abc.bcd(ss.mat = bcd.all3.r4, paras = paras.all3.r4, bw = 1.6875)
write.table(paras.all3.r5, "Round 5 parameters 10000 all 3.txt")
rm(list = ls())
library(doParallel)
library(doRNG)
library(tictoc)
library(readr)
source("Automatic.R")
save.sims.dir <- "BCD_results_all3_r5"
save.sims <- TRUE
if(save.sims) {
if(!dir.exists(save.sims.dir)) dir.create(save.sims.dir)
}
paras.all3.r5 <- as.matrix(read.table("Round 5 parameters 10000 all 3.txt", sep = "",
header = TRUE))
n.thread <- detectCores() - 1
n.sims <- 10000
cl <- makeCluster(n.thread)
registerDoParallel(cl)
tic()
ests <- foreach (i = 1:n.sims, .combine = rbind) %dopar% {
bcd.temp <- bcd(paras = paras.all3.r5[i,], paras.ind = "all_three")
readr::write_rds(bcd.temp,
path = paste0("./", save.sims.dir, "/Round_5_paras", i, "_res.rds"))
c(i, bcd.temp)
}
toc()
stopCluster(cl)
write.table(ests, "bcd_all3_r5.txt")
bcd.all3.r5 <- unname(ests)
mean(bcd.all3.r5[,2]) # 0.074475
ind.nan.all3.r5 <- which(is.na(bcd.all3.r5[,2]))
bcd.all3.r5.valid <- bcd.all3.r5[-ind.nan.all3.r5,]
mean(bcd.all3.r5[,2]) # 0.074475
mean(bcd.all3.r5.valid[,2]) # 0.074475
min(bcd.all3.r5.valid[,2]) # 0.02210361
apply(paras.all3.r5, 2, mean)
(4.217856 - 0.07836155)/4.217856 * 100
paras.final.est <- apply(paras.all3.r5, 2, mean)
# 0.010327233 0.055685462 9.784727353 0.009859462 0.100444870 5.598774875
paras.ref <- c(0.01, 0.05, 10, 0.01, 0.1, 5)
(paras.final.est - paras.ref)/paras.ref*100
kkk <- abc.bcd(bcd.all3.r5, paras.all3.r5, 2.53125)
apply(kkk, 2, mean)
setwd("F:/学术/Revised RSOS material/ABC 150 bandwidth no density/Consistency analysis")
rm(list = ls())
paras.final.ori <- as.matrix(read.table("Round 5 parameters 10000 all 3 ori.txt",
sep = "", header = TRUE))
paras.final.ex1 <- as.matrix(read.table("Round 6 parameters 10000 all 3 ex1.txt",
sep = "", header = TRUE))
paras.final.ex2 <- as.matrix(read.table("Round 5 parameters 10000 all 3 ex2.txt",
sep = "", header = TRUE))
paras.mean.ori <- apply(paras.final.ori,2 ,mean)
paras.mean.ori <- apply(paras.final.ori, 2 ,mean)
paras.mean.ex1 <- apply(paras.final.ex1, 2, mean)
paras.mean.ex2 <- apply(paras.final.ex2, 2, mean)
paras.mean.mat <- rbind(paras.mean.ori, paras.mean.ex1,
paras.mean.ex2)
View(paras.mean.mat)
# MC errors:
sd(paras.mean.mat[,1])/sqrt(3)
sd(paras.mean.mat[,2])/sqrt(3) # 7.887399e-05
sd(paras.mean.mat[,3])/sqrt(3) # 7.887399e-05
sd(paras.mean.mat[,4])/sqrt(3) # 7.887399e-05
sd(paras.mean.mat[,5])/sqrt(3) # 7.887399e-05
sd(paras.mean.mat[,6])/sqrt(3) # 7.887399e-05
# MC error percentage:
sd(paras.mean.mat[,1])/0.01*100
sd(paras.mean.mat[,2])/0.05*100
sd(paras.mean.mat[,3])/10*100
sd(paras.mean.mat[,4])/0.01*100
sd(paras.mean.mat[,5])/0.1*100
sd(paras.mean.mat[,6])/5*10
View(paras.mean.mat)
sd(paras.mean.mat[,2])
sd(paras.mean.mat[,2])/0.05
0.025^(-1.125)
0.025^(-1.6875)
